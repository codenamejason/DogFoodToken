/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MolochInterface extends ethers.utils.Interface {
  functions: {
    "proposals(uint256)": FunctionFragment;
    "processingReward()": FunctionFragment;
    "getMemberProposalVote(address,uint256)": FunctionFragment;
    "getCurrentPeriod()": FunctionFragment;
    "members(address)": FunctionFragment;
    "withdrawBalance(address,uint256)": FunctionFragment;
    "submitGuildKickProposal(address,string)": FunctionFragment;
    "ragequit(uint256,uint256)": FunctionFragment;
    "approvedTokens(uint256)": FunctionFragment;
    "updateDelegateKey(address)": FunctionFragment;
    "TOTAL()": FunctionFragment;
    "processWhitelistProposal(uint256)": FunctionFragment;
    "totalShares()": FunctionFragment;
    "proposalQueue(uint256)": FunctionFragment;
    "proposedToKick(address)": FunctionFragment;
    "memberAddressByDelegateKey(address)": FunctionFragment;
    "withdrawBalances(address[],uint256[],bool)": FunctionFragment;
    "userTokenBalances(address,address)": FunctionFragment;
    "submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)": FunctionFragment;
    "collectTokens(address)": FunctionFragment;
    "totalLoot()": FunctionFragment;
    "gracePeriodLength()": FunctionFragment;
    "getUserTokenBalance(address,address)": FunctionFragment;
    "tokenWhitelist(address)": FunctionFragment;
    "getTokenCount()": FunctionFragment;
    "getProposalQueueLength()": FunctionFragment;
    "summoningTime()": FunctionFragment;
    "votingPeriodLength()": FunctionFragment;
    "proposalDeposit()": FunctionFragment;
    "hasVotingPeriodExpired(uint256)": FunctionFragment;
    "sponsorProposal(uint256)": FunctionFragment;
    "submitVote(uint256,uint8)": FunctionFragment;
    "totalGuildBankTokens()": FunctionFragment;
    "canRagequit(uint256)": FunctionFragment;
    "init(address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256[])": FunctionFragment;
    "dilutionBound()": FunctionFragment;
    "getProposalFlags(uint256)": FunctionFragment;
    "memberList(uint256)": FunctionFragment;
    "periodDuration()": FunctionFragment;
    "depositToken()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "ragekick(address)": FunctionFragment;
    "cancelProposal(uint256)": FunctionFragment;
    "proposedToWhitelist(address)": FunctionFragment;
    "processGuildKickProposal(uint256)": FunctionFragment;
    "processProposal(uint256)": FunctionFragment;
    "ESCROW()": FunctionFragment;
    "GUILD()": FunctionFragment;
    "submitWhitelistProposal(address,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processingReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberProposalVote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGuildKickProposal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ragequit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelegateKey",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "TOTAL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processWhitelistProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedToKick",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "memberAddressByDelegateKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalances",
    values: [string[], BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokenBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "totalLoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gracePeriodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalQueueLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "summoningTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVotingPeriodExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalGuildBankTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canRagequit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string[],
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dilutionBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalFlags",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "memberList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ragekick", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "processGuildKickProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ESCROW", values?: undefined): string;
  encodeFunctionData(functionFragment: "GUILD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitWhitelistProposal",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberProposalVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitGuildKickProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ragequit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TOTAL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processWhitelistProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedToKick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberAddressByDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalLoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalQueueLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summoningTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasVotingPeriodExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalGuildBankTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canRagequit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dilutionBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "memberList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ragekick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processGuildKickProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ESCROW", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GUILD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitWhitelistProposal",
    data: BytesLike
  ): Result;

  events: {
    "SummonComplete(address,address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SubmitProposal(address,uint256,uint256,uint256,address,uint256,address,string,bool[6],uint256,address,address)": EventFragment;
    "SponsorProposal(address,address,uint256,uint256,uint256)": EventFragment;
    "SubmitVote(uint256,uint256,address,address,uint8)": EventFragment;
    "ProcessProposal(uint256,uint256,bool)": EventFragment;
    "ProcessWhitelistProposal(uint256,uint256,bool)": EventFragment;
    "ProcessGuildKickProposal(uint256,uint256,bool)": EventFragment;
    "Ragequit(address,uint256,uint256)": EventFragment;
    "TokensCollected(address,uint256)": EventFragment;
    "CancelProposal(uint256,address)": EventFragment;
    "UpdateDelegateKey(address,address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SummonComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SponsorProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessWhitelistProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessGuildKickProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ragequit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDelegateKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Moloch extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MolochInterface;

  functions: {
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      applicant: string;
      proposer: string;
      sponsor: string;
      sharesRequested: BigNumber;
      lootRequested: BigNumber;
      tributeOffered: BigNumber;
      tributeToken: string;
      paymentRequested: BigNumber;
      paymentToken: string;
      startingPeriod: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      details: string;
      maxTotalSharesAndLootAtYesVote: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: string;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
      12: string;
      13: BigNumber;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      applicant: string;
      proposer: string;
      sponsor: string;
      sharesRequested: BigNumber;
      lootRequested: BigNumber;
      tributeOffered: BigNumber;
      tributeToken: string;
      paymentRequested: BigNumber;
      paymentToken: string;
      startingPeriod: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      details: string;
      maxTotalSharesAndLootAtYesVote: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: string;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
      12: string;
      13: BigNumber;
    }>;

    processingReward(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "processingReward()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getMemberProposalVote(address,uint256)"(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getCurrentPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getCurrentPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      delegateKey: string;
      shares: BigNumber;
      loot: BigNumber;
      exists: boolean;
      highestIndexYesVote: BigNumber;
      jailed: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
      4: BigNumber;
      5: BigNumber;
    }>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      delegateKey: string;
      shares: BigNumber;
      loot: BigNumber;
      exists: boolean;
      highestIndexYesVote: BigNumber;
      jailed: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
      4: BigNumber;
      5: BigNumber;
    }>;

    withdrawBalance(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawBalance(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitGuildKickProposal(address,string)"(
      memberToKick: string,
      details: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ragequit(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ragequit(uint256,uint256)"(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approvedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "approvedTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateDelegateKey(address)"(
      newDelegateKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    TOTAL(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "TOTAL()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    processWhitelistProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processWhitelistProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalShares(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalShares()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposedToKick(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proposedToKick(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "memberAddressByDelegateKey(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawBalances(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawBalances(address[],uint256[],bool)"(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userTokenBalances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)"(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectTokens(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectTokens(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalLoot(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalLoot()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    gracePeriodLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "gracePeriodLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUserTokenBalance(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "tokenWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getTokenCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getTokenCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getProposalQueueLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getProposalQueueLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    summoningTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "summoningTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    votingPeriodLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "votingPeriodLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposalDeposit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalDeposit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasVotingPeriodExpired(uint256)"(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    sponsorProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sponsorProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitVote(uint256,uint8)"(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalGuildBankTokens(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalGuildBankTokens()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canRagequit(uint256)"(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    init(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256[])"(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dilutionBound(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "dilutionBound()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [boolean, boolean, boolean, boolean, boolean, boolean];
    }>;

    "getProposalFlags(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [boolean, boolean, boolean, boolean, boolean, boolean];
    }>;

    memberList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "memberList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    periodDuration(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "periodDuration()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    depositToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "depositToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    proposalCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ragekick(
      memberToKick: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ragekick(address)"(
      memberToKick: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proposedToWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proposedToWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    processGuildKickProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processGuildKickProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ESCROW(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ESCROW()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    GUILD(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "GUILD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitWhitelistProposal(address,string)"(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    applicant: string;
    proposer: string;
    sponsor: string;
    sharesRequested: BigNumber;
    lootRequested: BigNumber;
    tributeOffered: BigNumber;
    tributeToken: string;
    paymentRequested: BigNumber;
    paymentToken: string;
    startingPeriod: BigNumber;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    details: string;
    maxTotalSharesAndLootAtYesVote: BigNumber;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: BigNumber;
    8: string;
    9: BigNumber;
    10: BigNumber;
    11: BigNumber;
    12: string;
    13: BigNumber;
  }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    applicant: string;
    proposer: string;
    sponsor: string;
    sharesRequested: BigNumber;
    lootRequested: BigNumber;
    tributeOffered: BigNumber;
    tributeToken: string;
    paymentRequested: BigNumber;
    paymentToken: string;
    startingPeriod: BigNumber;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    details: string;
    maxTotalSharesAndLootAtYesVote: BigNumber;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: BigNumber;
    8: string;
    9: BigNumber;
    10: BigNumber;
    11: BigNumber;
    12: string;
    13: BigNumber;
  }>;

  processingReward(overrides?: CallOverrides): Promise<BigNumber>;

  "processingReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMemberProposalVote(
    memberAddress: string,
    proposalIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "getMemberProposalVote(address,uint256)"(
    memberAddress: string,
    proposalIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  members(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    delegateKey: string;
    shares: BigNumber;
    loot: BigNumber;
    exists: boolean;
    highestIndexYesVote: BigNumber;
    jailed: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: boolean;
    4: BigNumber;
    5: BigNumber;
  }>;

  "members(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    delegateKey: string;
    shares: BigNumber;
    loot: BigNumber;
    exists: boolean;
    highestIndexYesVote: BigNumber;
    jailed: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: boolean;
    4: BigNumber;
    5: BigNumber;
  }>;

  withdrawBalance(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawBalance(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitGuildKickProposal(
    memberToKick: string,
    details: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitGuildKickProposal(address,string)"(
    memberToKick: string,
    details: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ragequit(
    sharesToBurn: BigNumberish,
    lootToBurn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ragequit(uint256,uint256)"(
    sharesToBurn: BigNumberish,
    lootToBurn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approvedTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "approvedTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updateDelegateKey(
    newDelegateKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateDelegateKey(address)"(
    newDelegateKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  TOTAL(overrides?: CallOverrides): Promise<string>;

  "TOTAL()"(overrides?: CallOverrides): Promise<string>;

  processWhitelistProposal(
    proposalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processWhitelistProposal(uint256)"(
    proposalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalQueue(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "proposalQueue(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposedToKick(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "proposedToKick(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  memberAddressByDelegateKey(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "memberAddressByDelegateKey(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawBalances(
    tokens: string[],
    amounts: BigNumberish[],
    max: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawBalances(address[],uint256[],bool)"(
    tokens: string[],
    amounts: BigNumberish[],
    max: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userTokenBalances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userTokenBalances(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  submitProposal(
    applicant: string,
    sharesRequested: BigNumberish,
    lootRequested: BigNumberish,
    tributeOffered: BigNumberish,
    tributeToken: string,
    paymentRequested: BigNumberish,
    paymentToken: string,
    details: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)"(
    applicant: string,
    sharesRequested: BigNumberish,
    lootRequested: BigNumberish,
    tributeOffered: BigNumberish,
    tributeToken: string,
    paymentRequested: BigNumberish,
    paymentToken: string,
    details: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectTokens(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectTokens(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLoot()"(overrides?: CallOverrides): Promise<BigNumber>;

  gracePeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "gracePeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUserTokenBalance(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserTokenBalance(address,address)"(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "tokenWhitelist(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getProposalQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getProposalQueueLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  summoningTime(overrides?: CallOverrides): Promise<BigNumber>;

  "summoningTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  hasVotingPeriodExpired(
    startingPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasVotingPeriodExpired(uint256)"(
    startingPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sponsorProposal(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sponsorProposal(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitVote(
    proposalIndex: BigNumberish,
    uintVote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitVote(uint256,uint8)"(
    proposalIndex: BigNumberish,
    uintVote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalGuildBankTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "totalGuildBankTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  canRagequit(
    highestIndexYesVote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canRagequit(uint256)"(
    highestIndexYesVote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    _summoner: string[],
    _approvedTokens: string[],
    _periodDuration: BigNumberish,
    _votingPeriodLength: BigNumberish,
    _gracePeriodLength: BigNumberish,
    _proposalDeposit: BigNumberish,
    _dilutionBound: BigNumberish,
    _processingReward: BigNumberish,
    _summonerShares: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init(address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256[])"(
    _summoner: string[],
    _approvedTokens: string[],
    _periodDuration: BigNumberish,
    _votingPeriodLength: BigNumberish,
    _gracePeriodLength: BigNumberish,
    _proposalDeposit: BigNumberish,
    _dilutionBound: BigNumberish,
    _processingReward: BigNumberish,
    _summonerShares: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

  "dilutionBound()"(overrides?: CallOverrides): Promise<BigNumber>;

  getProposalFlags(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

  "getProposalFlags(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

  memberList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "memberList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "periodDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  "depositToken()"(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  ragekick(
    memberToKick: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ragekick(address)"(
    memberToKick: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelProposal(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelProposal(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proposedToWhitelist(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proposedToWhitelist(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  processGuildKickProposal(
    proposalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processGuildKickProposal(uint256)"(
    proposalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  processProposal(
    proposalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processProposal(uint256)"(
    proposalIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ESCROW(overrides?: CallOverrides): Promise<string>;

  "ESCROW()"(overrides?: CallOverrides): Promise<string>;

  GUILD(overrides?: CallOverrides): Promise<string>;

  "GUILD()"(overrides?: CallOverrides): Promise<string>;

  submitWhitelistProposal(
    tokenToWhitelist: string,
    details: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitWhitelistProposal(address,string)"(
    tokenToWhitelist: string,
    details: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      applicant: string;
      proposer: string;
      sponsor: string;
      sharesRequested: BigNumber;
      lootRequested: BigNumber;
      tributeOffered: BigNumber;
      tributeToken: string;
      paymentRequested: BigNumber;
      paymentToken: string;
      startingPeriod: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      details: string;
      maxTotalSharesAndLootAtYesVote: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: string;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
      12: string;
      13: BigNumber;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      applicant: string;
      proposer: string;
      sponsor: string;
      sharesRequested: BigNumber;
      lootRequested: BigNumber;
      tributeOffered: BigNumber;
      tributeToken: string;
      paymentRequested: BigNumber;
      paymentToken: string;
      startingPeriod: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      details: string;
      maxTotalSharesAndLootAtYesVote: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: string;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
      12: string;
      13: BigNumber;
    }>;

    processingReward(overrides?: CallOverrides): Promise<BigNumber>;

    "processingReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getMemberProposalVote(address,uint256)"(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      delegateKey: string;
      shares: BigNumber;
      loot: BigNumber;
      exists: boolean;
      highestIndexYesVote: BigNumber;
      jailed: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
      4: BigNumber;
      5: BigNumber;
    }>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      delegateKey: string;
      shares: BigNumber;
      loot: BigNumber;
      exists: boolean;
      highestIndexYesVote: BigNumber;
      jailed: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
      4: BigNumber;
      5: BigNumber;
    }>;

    withdrawBalance(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawBalance(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "submitGuildKickProposal(address,string)"(
      memberToKick: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ragequit(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "ragequit(uint256,uint256)"(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "approvedTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDelegateKey(address)"(
      newDelegateKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    TOTAL(overrides?: CallOverrides): Promise<string>;

    "TOTAL()"(overrides?: CallOverrides): Promise<string>;

    processWhitelistProposal(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processWhitelistProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedToKick(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "proposedToKick(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "memberAddressByDelegateKey(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawBalances(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawBalances(address[],uint256[],bool)"(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userTokenBalances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)"(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectTokens(token: string, overrides?: CallOverrides): Promise<void>;

    "collectTokens(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    gracePeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "gracePeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserTokenBalance(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "tokenWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposalQueueLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    summoningTime(overrides?: CallOverrides): Promise<BigNumber>;

    "summoningTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasVotingPeriodExpired(uint256)"(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sponsorProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sponsorProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitVote(uint256,uint8)"(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalGuildBankTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "totalGuildBankTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canRagequit(uint256)"(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256[])"(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

    "getProposalFlags(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

    memberList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "memberList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "periodDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    "depositToken()"(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ragekick(memberToKick: string, overrides?: CallOverrides): Promise<void>;

    "ragekick(address)"(
      memberToKick: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedToWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proposedToWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    processGuildKickProposal(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processGuildKickProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ESCROW(overrides?: CallOverrides): Promise<string>;

    "ESCROW()"(overrides?: CallOverrides): Promise<string>;

    GUILD(overrides?: CallOverrides): Promise<string>;

    "GUILD()"(overrides?: CallOverrides): Promise<string>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "submitWhitelistProposal(address,string)"(
      tokenToWhitelist: string,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    SummonComplete(
      summoner: string | null,
      tokens: null,
      summoningTime: null,
      periodDuration: null,
      votingPeriodLength: null,
      gracePeriodLength: null,
      proposalDeposit: null,
      dilutionBound: null,
      processingReward: null
    ): EventFilter;

    SubmitProposal(
      applicant: string | null,
      sharesRequested: null,
      lootRequested: null,
      tributeOffered: null,
      tributeToken: null,
      paymentRequested: null,
      paymentToken: null,
      details: null,
      flags: null,
      proposalId: null,
      delegateKey: string | null,
      memberAddress: string | null
    ): EventFilter;

    SponsorProposal(
      delegateKey: string | null,
      memberAddress: string | null,
      proposalId: null,
      proposalIndex: null,
      startingPeriod: null
    ): EventFilter;

    SubmitVote(
      proposalId: null,
      proposalIndex: BigNumberish | null,
      delegateKey: string | null,
      memberAddress: string | null,
      uintVote: null
    ): EventFilter;

    ProcessProposal(
      proposalIndex: BigNumberish | null,
      proposalId: BigNumberish | null,
      didPass: null
    ): EventFilter;

    ProcessWhitelistProposal(
      proposalIndex: BigNumberish | null,
      proposalId: BigNumberish | null,
      didPass: null
    ): EventFilter;

    ProcessGuildKickProposal(
      proposalIndex: BigNumberish | null,
      proposalId: BigNumberish | null,
      didPass: null
    ): EventFilter;

    Ragequit(
      memberAddress: string | null,
      sharesToBurn: null,
      lootToBurn: null
    ): EventFilter;

    TokensCollected(token: string | null, amountToCollect: null): EventFilter;

    CancelProposal(
      proposalId: BigNumberish | null,
      applicantAddress: null
    ): EventFilter;

    UpdateDelegateKey(
      memberAddress: string | null,
      newDelegateKey: null
    ): EventFilter;

    Withdraw(
      memberAddress: string | null,
      token: null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processingReward(overrides?: CallOverrides): Promise<BigNumber>;

    "processingReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMemberProposalVote(address,uint256)"(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBalance(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawBalance(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitGuildKickProposal(address,string)"(
      memberToKick: string,
      details: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ragequit(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ragequit(uint256,uint256)"(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approvedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateDelegateKey(address)"(
      newDelegateKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    TOTAL(overrides?: CallOverrides): Promise<BigNumber>;

    "TOTAL()"(overrides?: CallOverrides): Promise<BigNumber>;

    processWhitelistProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processWhitelistProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedToKick(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "proposedToKick(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "memberAddressByDelegateKey(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBalances(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawBalances(address[],uint256[],bool)"(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userTokenBalances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)"(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectTokens(token: string, overrides?: Overrides): Promise<BigNumber>;

    "collectTokens(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    gracePeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "gracePeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserTokenBalance(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposalQueueLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    summoningTime(overrides?: CallOverrides): Promise<BigNumber>;

    "summoningTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasVotingPeriodExpired(uint256)"(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sponsorProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sponsorProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitVote(uint256,uint8)"(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalGuildBankTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "totalGuildBankTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canRagequit(uint256)"(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "init(address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256[])"(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProposalFlags(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "memberList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "periodDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    "depositToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ragekick(memberToKick: string, overrides?: Overrides): Promise<BigNumber>;

    "ragekick(address)"(
      memberToKick: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proposedToWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposedToWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processGuildKickProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processGuildKickProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ESCROW(overrides?: CallOverrides): Promise<BigNumber>;

    "ESCROW()"(overrides?: CallOverrides): Promise<BigNumber>;

    GUILD(overrides?: CallOverrides): Promise<BigNumber>;

    "GUILD()"(overrides?: CallOverrides): Promise<BigNumber>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitWhitelistProposal(address,string)"(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processingReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "processingReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMemberProposalVote(address,uint256)"(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawBalance(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitGuildKickProposal(
      memberToKick: string,
      details: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitGuildKickProposal(address,string)"(
      memberToKick: string,
      details: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ragequit(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ragequit(uint256,uint256)"(
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approvedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvedTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateDelegateKey(address)"(
      newDelegateKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    TOTAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOTAL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processWhitelistProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processWhitelistProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedToKick(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposedToKick(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "memberAddressByDelegateKey(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBalances(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawBalances(address[],uint256[],bool)"(
      tokens: string[],
      amounts: BigNumberish[],
      max: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userTokenBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userTokenBalances(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitProposal(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitProposal(address,uint256,uint256,uint256,address,uint256,address,string)"(
      applicant: string,
      sharesRequested: BigNumberish,
      lootRequested: BigNumberish,
      tributeOffered: BigNumberish,
      tributeToken: string,
      paymentRequested: BigNumberish,
      paymentToken: string,
      details: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectTokens(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectTokens(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalLoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalLoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gracePeriodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gracePeriodLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserTokenBalance(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTokenCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalQueueLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposalQueueLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    summoningTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "summoningTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriodLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votingPeriodLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasVotingPeriodExpired(uint256)"(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sponsorProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sponsorProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitVote(uint256,uint8)"(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalGuildBankTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalGuildBankTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canRagequit(uint256)"(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address[],address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256[])"(
      _summoner: string[],
      _approvedTokens: string[],
      _periodDuration: BigNumberish,
      _votingPeriodLength: BigNumberish,
      _gracePeriodLength: BigNumberish,
      _proposalDeposit: BigNumberish,
      _dilutionBound: BigNumberish,
      _processingReward: BigNumberish,
      _summonerShares: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dilutionBound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposalFlags(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "memberList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ragekick(
      memberToKick: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ragekick(address)"(
      memberToKick: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proposedToWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposedToWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processGuildKickProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processGuildKickProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ESCROW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ESCROW()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUILD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GUILD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitWhitelistProposal(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitWhitelistProposal(address,string)"(
      tokenToWhitelist: string,
      details: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
