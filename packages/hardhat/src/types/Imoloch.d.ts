/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ImolochInterface extends ethers.utils.Interface {
  functions: {
    "cancelProposal(uint256)": FunctionFragment;
    "depositToken()": FunctionFragment;
    "getProposalFlags(uint256)": FunctionFragment;
    "getUserTokenBalance(address,address)": FunctionFragment;
    "memberAddressByDelegateKey(address)": FunctionFragment;
    "members(address)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "tokenWhitelist(address)": FunctionFragment;
    "totalShares()": FunctionFragment;
    "userTokenBalances(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalFlags",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "memberAddressByDelegateKey",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userTokenBalances",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberAddressByDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokenBalances",
    data: BytesLike
  ): Result;

  events: {};
}

export class Imoloch extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ImolochInterface;

  functions: {
    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "depositToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [boolean, boolean, boolean, boolean, boolean, boolean];
    }>;

    "getProposalFlags(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [boolean, boolean, boolean, boolean, boolean, boolean];
    }>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUserTokenBalance(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    memberAddressByDelegateKey(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "memberAddressByDelegateKey(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    members(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
      4: BigNumber;
      5: BigNumber;
    }>;

    "members(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
      4: BigNumber;
      5: BigNumber;
    }>;

    proposals(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: string;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
    }>;

    "proposals(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: string;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
    }>;

    tokenWhitelist(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "tokenWhitelist(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    totalShares(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalShares()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    userTokenBalances(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userTokenBalances(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  cancelProposal(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelProposal(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  "depositToken()"(overrides?: CallOverrides): Promise<string>;

  getProposalFlags(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

  "getProposalFlags(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

  getUserTokenBalance(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserTokenBalance(address,address)"(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  memberAddressByDelegateKey(
    user: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "memberAddressByDelegateKey(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<string>;

  members(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: boolean;
    4: BigNumber;
    5: BigNumber;
  }>;

  "members(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: boolean;
    4: BigNumber;
    5: BigNumber;
  }>;

  proposals(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: BigNumber;
    8: string;
    9: BigNumber;
    10: BigNumber;
    11: BigNumber;
  }>;

  "proposals(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: BigNumber;
    8: string;
    9: BigNumber;
    10: BigNumber;
    11: BigNumber;
  }>;

  tokenWhitelist(token: string, overrides?: CallOverrides): Promise<boolean>;

  "tokenWhitelist(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  userTokenBalances(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userTokenBalances(address,address)"(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    cancelProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    "depositToken()"(overrides?: CallOverrides): Promise<string>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

    "getProposalFlags(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean, boolean, boolean]>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserTokenBalance(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberAddressByDelegateKey(
      user: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "memberAddressByDelegateKey(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<string>;

    members(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
      4: BigNumber;
      5: BigNumber;
    }>;

    "members(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: boolean;
      4: BigNumber;
      5: BigNumber;
    }>;

    proposals(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: string;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
    }>;

    "proposals(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: string;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
    }>;

    tokenWhitelist(token: string, overrides?: CallOverrides): Promise<boolean>;

    "tokenWhitelist(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    userTokenBalances(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userTokenBalances(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    "depositToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProposalFlags(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserTokenBalance(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberAddressByDelegateKey(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "memberAddressByDelegateKey(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    members(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "members(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWhitelist(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenWhitelist(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    userTokenBalances(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userTokenBalances(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelProposal(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalFlags(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposalFlags(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokenBalance(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserTokenBalance(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberAddressByDelegateKey(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "memberAddressByDelegateKey(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    members(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "members(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenWhitelist(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenWhitelist(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userTokenBalances(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userTokenBalances(address,address)"(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
